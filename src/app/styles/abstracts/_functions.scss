// -----------------------------------------------------------------------------
// This file contains all application-wide Sass functions.
// -----------------------------------------------------------------------------
@use 'sass:math';
@use 'sass:meta';

// Converts px to rem
@function rem($value, $base-value: 16px) {
  // If you haven't set the root font size, then it is the browser default, which is often 16px.
  @if not $base-value {
    // stylelint-disable-next-line meowtec/no-px
    $base-value: 16px;
  }

  @if meta.type-of($value) != 'number' {
    @warn 'value: #{$value} is not a number';
    @return null;
  }

  @if meta.type-of($base-value) != 'number' {
    @warn 'base-value: #{$base-value} is not a number';
    @return null;
  }

  // If the base font size is a %, then multiply it by 16px
  // This is because 100% font size = 16px in most all browsers
  @if math.unit($base-value) == '%' {
    // stylelint-disable-next-line meowtec/no-px
    $base-value: ($base-value / 100%) * 16px;
  }

  // Using rem as base allows correct scaling
  @if math.unit($base-value) == 'rem' or math.unit($base-value) == 'em' {
    // stylelint-disable-next-line meowtec/no-px
    $base-value: strip-unit($base-value) * 16px;
  }

  $value: calc(strip-unit($value) / strip-unit($base-value)) * 1rem;

  // Turn 0rem into 0
  @if strip-unit($value) == 0 {
    $value: 0;
  }

  @return $value;
}

// Remove the unit of a length
// @param {Number} $number - Number to remove unit from
// @return {Number} - Unitless number
@function strip-unit($number) {
  @if meta.type-of($number) == 'number' and not math.is-unitless($number) {
    @return math.div($number, ($number * 0 + 1));
  }

  @return $number;
}
